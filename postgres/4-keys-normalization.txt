Three Kinds of Keys

* Primary Key - generally an integer auto-increment field
* Logical Key - What the outside world uses for lookup
* Foreign key - Generally an integer key pointing to a row in another table


// Primary Key Rules

Best practices:

*   Never use your *logical key* as the primary key.
*   Logical keys can and do change , albeit slowly.
*   Relationships that are based on matching string fields are less efficient than integers.

User(
    id,
    email,
    password,
    name,
    created_at,
    modified_at,
    login_at
)

id is primary key,
email is logical key


// Normalization

Artist(
    id,
    name
)

Album(
    id,
    title,
    artist_id
)

Genre(
    id,
    name
)

Track(
    id,
    title,
    rating,
    len,
    count,
    album_id,
    genre_id
)

title & name are logical key
id's are primary keys
album_id & genre_id are Foreign keys


// BUILDING TABLES FOR ABOVE SCHEMA's

CREATE TABLE artist(
    id SERIAL,
    name VARCHAR(128) UNIQUE,
    PRIMARY KEY(id)
);

CREATE TABLE album(
    id SERIAL,
    title VARCHAR(128) UNIQUE,
    artist_id INTEGER REFERENCES artist(id) ON DELETE CASCADE,
    PRIMARY KEY(id)
);

CREATE TABLE genre(
    id SERIAL,
    name VARCHAR(128) UNIQUE,
    primary key(id)
);

CREATE TABLE track(
    id SERIAL,
    title VARCHAR(128),
    len INTEGER,
    rating INTEGER,
    count INTEGER,
    album_id INTEGER REFERENCES album(id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genre(id) ON DELETE CASCADE,
    UNIQUE(title,album_id),
    PRIMARY KEY(id)
);

when inserting data we don't have to pass the id field because it will auto increment



// USING JOIN Across TABLES

=> SELECT album.title , artist.name 
    FROM album JOIN artist
    ON album.artist_id = artist.id;


// JOINs can get complex

=>  SELECT track.title , artist.name , album.title , genre.name
    FROM track
        JOIN genre ON track.genre_id = genre.id
        JOIN album ON track.album_id = album.id
        JOIN artist ON album.artist_id = artist.id


// Many to Many 

* Sometimes we need to model a Relationship that is many to many
* We need to add a "connection" table with two Foreign keys.
* There is usually no separate primary key.


Course <----------> Student

Many to many relationship

Course(
    id,
    title
)

Student(
    id,
    email,
    name
)

member(
    student_id,
    course_id,
    role
)

// Table for above database

CREATE TABLE student(
    id SERIAL,
    name VARCHAR(128),
    email VARCHAR(128) UNIQUE,
    PRIMARY KEY(id)
);

CREATE TABLE course(
    id SERIAL,
    title VARCHAR(128) UNIQUE,
    PRIMARY KEY(id)
);

CREATE TABLE member(
    student_id INTEGER REFERENCES student(id) ON DELETE CASCADE,
    course_id INTEGER REFERENCES course(id) ON DELETE CASCADE,
    role INTEGER,
    PRIMARY KEY (student_id , course_id)
);



